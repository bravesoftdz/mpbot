/******************************************************************************/
/***          Generated by IBExpert 2011.10.01 06.06.2012 18:42:30          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES UTF8;

CREATE DATABASE 'C:\Projects\!chrome\MPolis2\mpolis.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET UTF8 COLLATION UTF8;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN BOOLEAN AS
INTEGER
CHECK (value in (0,1));



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_PARAMS_ID;
SET GENERATOR GEN_PARAMS_ID TO 14;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE CALC_REWARD_POINTS (
    OWNER_USER_ID BIGINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DUAL (
    ROWCOUNT INTEGER = 1)
RETURNS (
    ROWID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE FRIEND_UPDATE (
    USER_ID BIGINT,
    ALEVEL INTEGER,
    WISH_LIST VARCHAR(150))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE GET_FRIEND_REWARD_POINTS (
    FRIEND_ID BIGINT)
RETURNS (
    REWARD DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ITEM_ID (
    NAME VARCHAR(100))
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_ITEM_NAME (
    ID INTEGER)
RETURNS (
    NAME VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GIFT_REWARD (
    GAME_ITEM_ID INTEGER)
RETURNS (
    REWARD FLOAT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE WISH_LIST_UPDATE (
    FRIEND_ID BIGINT,
    WISH_LIST_STR VARCHAR(150))
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ATTR_TRANSFORM (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50)
);


CREATE TABLE ATTR_TYPE (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50)
);


CREATE TABLE ATTRIBUTES (
    ID                 INTEGER NOT NULL,
    NAME               VARCHAR(50),
    ATTR_TYPE_ID       INTEGER NOT NULL,
    ATTR_TRANSFORM_ID  INTEGER
);


CREATE TABLE DENY_FIELDS (
    NAME  VARCHAR(50) CHARACTER SET NONE NOT NULL
);


CREATE TABLE EXEC_CONTRACTS (
    FACTORY_NAME    VARCHAR(50) CHARACTER SET NONE NOT NULL,
    CONTRACT_NAME   VARCHAR(50) CHARACTER SET NONE,
    AFFECTED_ITEMS  VARCHAR(1000) CHARACTER SET NONE
);


CREATE TABLE FIELD_STATES (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) CHARACTER SET NONE
);


CREATE TABLE FRIENDS (
    ID             BIGINT NOT NULL,
    "LEVEL"        INTEGER,
    REWARD_POINTS  DOUBLE PRECISION,
    DELETED        SMALLINT DEFAULT 0,
    INGAME         INTEGER,
    ACTIVITY       INTEGER DEFAULT 0,
    HINT           VARCHAR(100) CHARACTER SET NONE,
    NEXT_HELP_DT   TIMESTAMP
);


CREATE TABLE GAME_ITEMS (
    ID               INTEGER NOT NULL,
    NAME             VARCHAR(100) CHARACTER SET NONE,
    SHOP_DEPARTMENT  VARCHAR(100) CHARACTER SET NONE,
    SUPER_CLASS      VARCHAR(50) CHARACTER SET NONE,
    RUS_NAME         VARCHAR(200) CHARACTER SET NONE
);


CREATE TABLE GAME_ITEMS_ATTR (
    GAME_ITEMS_ID  INTEGER NOT NULL,
    ATTRIBUTES_ID  INTEGER NOT NULL,
    ASBIGINT       BIGINT,
    ASINT          INTEGER,
    ASBOOL         BOOLEAN,
    ASVARCHAR      VARCHAR(2000),
    ASFLOAT        DOUBLE PRECISION
);


CREATE TABLE GIFTS_REC (
    ID               BIGINT NOT NULL,
    GAME_ITEMS_ID    INTEGER NOT NULL,
    FROM_FRIENDS_ID  BIGINT NOT NULL,
    QTY              INTEGER,
    STATE            INTEGER DEFAULT 0 NOT NULL
);


CREATE TABLE GIFTS_REWARD_ADDED (
    ID             BIGINT NOT NULL,
    EVENT_DATE     TIMESTAMP,
    REW            DOUBLE PRECISION,
    FRIENDS_ID     BIGINT,
    GAME_ITEMS_ID  BIGINT
);


CREATE TABLE PARAMS (
    ID            INTEGER NOT NULL,
    ATTR_TYPE_ID  INTEGER NOT NULL,
    NAME          VARCHAR(100),
    VAL           VARCHAR(1000)
);


CREATE TABLE PRIORITY_BUILD (
    NAME      VARCHAR(50) CHARACTER SET NONE NOT NULL,
    PRIORITY  INTEGER
);


CREATE TABLE WISHLIST (
    FRIENDS_ID     BIGINT NOT NULL,
    GAME_ITEMS_ID  INTEGER NOT NULL
);




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE ATTRIBUTES ADD CONSTRAINT PK_ATTRIBUTES PRIMARY KEY (ID);
ALTER TABLE ATTR_TRANSFORM ADD CONSTRAINT PK_ATTR_TRANSFORM PRIMARY KEY (ID);
ALTER TABLE ATTR_TYPE ADD CONSTRAINT PK_ATTR_TYPE PRIMARY KEY (ID);
ALTER TABLE DENY_FIELDS ADD CONSTRAINT PK_DENY_FIELDS PRIMARY KEY (NAME);
ALTER TABLE EXEC_CONTRACTS ADD CONSTRAINT PK_EXEC_CONTRACTS PRIMARY KEY (FACTORY_NAME);
ALTER TABLE FIELD_STATES ADD CONSTRAINT PK_FIELD_STATES PRIMARY KEY (ID);
ALTER TABLE FRIENDS ADD CONSTRAINT PK_FRIENDS PRIMARY KEY (ID);
ALTER TABLE GAME_ITEMS ADD CONSTRAINT PK_GIFTS PRIMARY KEY (ID);
ALTER TABLE GAME_ITEMS_ATTR ADD CONSTRAINT PK_GAME_ITEMS_ATTR PRIMARY KEY (GAME_ITEMS_ID, ATTRIBUTES_ID);
ALTER TABLE GIFTS_REC ADD CONSTRAINT PK_GIFTS_REC PRIMARY KEY (ID);
ALTER TABLE GIFTS_REWARD_ADDED ADD CONSTRAINT PK_GIFTS_REWARD_ADDED PRIMARY KEY (ID);
ALTER TABLE PARAMS ADD CONSTRAINT PK_PARAMS PRIMARY KEY (ID);
ALTER TABLE PRIORITY_BUILD ADD CONSTRAINT PK_PRIORITY_BUID PRIMARY KEY (NAME);
ALTER TABLE WISHLIST ADD CONSTRAINT PK_WISHLIST_1 PRIMARY KEY (FRIENDS_ID, GAME_ITEMS_ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE ATTRIBUTES ADD CONSTRAINT FK_ATTRIBUTES_1 FOREIGN KEY (ATTR_TYPE_ID) REFERENCES ATTR_TYPE (ID);
ALTER TABLE ATTRIBUTES ADD CONSTRAINT FK_ATTRIBUTES_2 FOREIGN KEY (ATTR_TRANSFORM_ID) REFERENCES ATTR_TRANSFORM (ID);
ALTER TABLE GAME_ITEMS_ATTR ADD CONSTRAINT FK_GAME_ITEMS_ATTR_1 FOREIGN KEY (GAME_ITEMS_ID) REFERENCES GAME_ITEMS (ID);
ALTER TABLE GAME_ITEMS_ATTR ADD CONSTRAINT FK_GAME_ITEMS_ATTR_2 FOREIGN KEY (ATTRIBUTES_ID) REFERENCES ATTRIBUTES (ID);
ALTER TABLE PARAMS ADD CONSTRAINT FK_PARAMS_1 FOREIGN KEY (ATTR_TYPE_ID) REFERENCES ATTR_TYPE (ID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE UNIQUE INDEX ATTRIBUTES_IDX1 ON ATTRIBUTES (NAME);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: GIFTS_REC_BIU0 */
CREATE TRIGGER GIFTS_REC_BIU0 FOR GIFTS_REC
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
begin
  if (inserting) then
  begin
    if (new.STATE is null) then
      new.STATE = 2;
  end

  if (updating) then
  begin
    if ((new.STATE is null) or (new.STATE = old.STATE)) then
      new.STATE = 0;
  end
end
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE CALC_REWARD_POINTS (
    OWNER_USER_ID BIGINT)
AS
declare variable FRID bigint;
declare variable REW float;
declare variable GIID bigint;
declare variable ID_REW bigint;
declare variable GIFT_ID bigint;
begin
  -- select disappeared gifts and add reward for them
  for select FROM_FRIENDS_ID, GAME_ITEMS_ID, ID
      from GIFTS_REC
      where STATE = 1
      into :FRID, :GIID, :GIFT_ID
  do
  begin
    select REWARD
    from GIFT_REWARD(:GIID)
    into :REW;

    select ID
    from GIFTS_REWARD_ADDED
    where ID = :GIFT_ID
    into :ID_REW;

    if (:ID_REW is null) then
    begin
      insert into GIFTS_REWARD_ADDED (ID, EVENT_DATE, REW, FRIENDS_ID, GAME_ITEMS_ID)
      values (:GIFT_ID, current_timestamp, :REW, :FRID, :GIID);

      update FRIENDS
      set REWARD_POINTS = REWARD_POINTS + :REW,
          HINT = 'rew:' || cast(:REW as varchar(30))
      where ID = :FRID;
    end
  end

  -- delete disappeared gifts
  delete from GIFTS_REC
  where STATE = 1;

  --  reward for items in my wishlist
  for select GR.from_friends_id, GR.game_items_id
      from GIFTS_REC GR, WISHLIST WI
      where (WI.friends_id = :OWNER_USER_ID) and
            (GR.game_items_id = WI.game_items_id) and
            (STATE = 2)
      into :FRID, :GIID
  do
  begin
    select REWARD
    from GIFT_REWARD(:GIID)
    into :REW;

    update FRIENDS
    set REWARD_POINTS = REWARD_POINTS + :REW,
        HINT = 'my wish rew:' || cast(:REW as varchar(30))
    where ID = :FRID;
  end

  suspend;
end^


ALTER PROCEDURE DUAL (
    ROWCOUNT INTEGER = 1)
RETURNS (
    ROWID INTEGER)
AS
begin
  ROWID = 1;
  while (ROWID <= ROWCOUNT) do begin
    suspend;
    ROWID = ROWID + 1;
  end
end^


ALTER PROCEDURE FRIEND_UPDATE (
    USER_ID BIGINT,
    ALEVEL INTEGER,
    WISH_LIST VARCHAR(150))
AS
declare variable CNT integer;
begin
  select count(ID)
  from FRIENDS
  where ID = :USER_ID
  into CNT;

  if (CNT > 0) then
  begin
    update FRIENDS
    set DELETED = 0,
        level = :ALEVEL
    where ID = :USER_ID;
  end
  else
  begin
    insert into FRIENDS (ID, level, REWARD_POINTS, DELETED)
    values (:USER_ID, :ALEVEL, 0, 0);
  end

  execute procedure WISH_LIST_UPDATE(:USER_ID, :WISH_LIST);

  suspend;
end^


ALTER PROCEDURE GET_FRIEND_REWARD_POINTS (
    FRIEND_ID BIGINT)
RETURNS (
    REWARD DOUBLE PRECISION)
AS
begin
  select REWARD_POINTS
  from FRIENDS
  where ID = :FRIEND_ID
  into :REWARD;

  if (REWARD is null) then
    REWARD = 0;

  suspend;
end^


ALTER PROCEDURE GET_ITEM_ID (
    NAME VARCHAR(100))
RETURNS (
    ID INTEGER)
AS
begin
  select ID
  from GAME_ITEMS
  where NAME = :NAME
  into :ID;

  if (ID is null) then
    ID = 0;

  suspend;
end^


ALTER PROCEDURE GET_ITEM_NAME (
    ID INTEGER)
RETURNS (
    NAME VARCHAR(100))
AS
begin
  select NAME
  from GAME_ITEMS
  where ID = :ID
  into :NAME;

  if (NAME is null) then
    NAME = '';

  suspend;
end^


ALTER PROCEDURE GIFT_REWARD (
    GAME_ITEM_ID INTEGER)
RETURNS (
    REWARD FLOAT)
AS
declare variable CNT float;
declare variable MAX_CNT float;
begin
  select max(CNT)
  from (select count(GAME_ITEMS_ID) CNT
        from WISHLIST
        group by GAME_ITEMS_ID)
  into :MAX_CNT;

  select count(GAME_ITEMS_ID) CNT
  from WISHLIST
  where GAME_ITEMS_ID = :GAME_ITEM_ID
  group by GAME_ITEMS_ID
  into :CNT;

  if (CNT is null) then
    CNT = 0;

  REWARD = trunc((CNT / MAX_CNT) * 3, 2);
  if (REWARD < 1) then
    REWARD = 1;

  suspend;
end^


ALTER PROCEDURE WISH_LIST_UPDATE (
    FRIEND_ID BIGINT,
    WISH_LIST_STR VARCHAR(150))
AS
declare variable GIFT_ID integer;
declare variable STR varchar(200);
declare variable POS integer;
begin
  delete from WISHLIST
  where FRIENDS_ID = :FRIEND_ID;

  STR = trim(WISH_LIST_STR);
  if (STR = '') then
    exit;

  POS = 1;

  while (POS <> 0) do
  begin
    POS = position(',', :STR, 1);
    if (POS <> 0) then
    begin
      select cast(substring(:STR from 1 for :POS - 1) as integer)
      from DUAL
      into GIFT_ID;
      STR = substring(:STR from POS + 1 for 50);
    end
    else
    begin
      select cast(:STR as integer)
      from DUAL
      into GIFT_ID;
    end

    if (not(GIFT_ID is null)) then
      insert into WISHLIST (FRIENDS_ID, GAME_ITEMS_ID)
      values (:FRIEND_ID, :GIFT_ID);

  end

  suspend;
end^



SET TERM ; ^
